/*---------------------------------------------------------------------*/
/*------------------------- mixins/icon.scss --------------------------*/
/*---------------------------------------------------------------------*/

@use "configurable" as c;

@mixin icon {
  & {
    position: static;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    padding: 0;
    font-style: normal;
  }
}

/// Apply configurable icon styles to a base element. Then, for each component
/// that uses it, make it configurable by applying the `configuration` mixin to
/// an appropriate context selector.
/// @prop {List} $prefixes... - The configurable property prefix followed by optional fallback prefixes.
/// @example
///   a {
///     icon.styles(--link);
///   }
///   a:visited {
///     icon.styles(--link-visited, --link);
///   }
@mixin styles($prefixes...) {
  @include icon;

  & {
    font-family: c.property(
      c.prefix(icon-font-family, $prefixes),
      var(--icon-font-family)
    );
    font-size: c.property(
      c.prefix(icon-font-size, $prefixes),
      var(--icon-font-size)
    );
    line-height: c.property(c.prefix(icon-line-height, $prefixes), inherit);
    text-decoration: c.property(c.prefix(icon-text-decoration, $prefixes));
    padding-right: c.property(c.prefix(icon-padding-right, $prefixes), 0.5rem);
    padding-left: c.property(c.prefix(icon-padding-left, $prefixes), 0);
    background-color: c.property(c.prefix(icon-background-color, $prefixes));
    color: c.property(c.prefix(icon-text-color, $prefixes));
  }
}

/// Apply configurable icon content to a base element. Then, for each component
/// that uses it, make it configurable by applying the `configuration` mixin to
/// an appropriate context selector.
/// @prop {List} $prefixes... - The configurable property prefix followed by optional fallback prefixes.
/// @example
///   a {
///     icon.content(--link);
///   }
///   a:visited {
///     icon.content(--link-visited, --link);
///   }
@mixin content($prefixes...) {
  & {
    content: c.property(c.prefix(icon, $prefixes));
  }
}

/// Set up an icon configuration context using the given prefixes, starting
/// with the base component's prefix (the "target"), followed by one or more
/// configuration context prefixes.
/// @prop {List} $prefixes... - List of prefixes, starting with that of the base component.
/// @example
///   .widget {
///     icon.configuration(--link, --widget-link);
///     icon.configuration(--visited-link, --widget-visited-link, --widget-link);
///     // et cetera
///   }
@mixin configuration($prefixes...) {
  @include c.context(
    (
      icon-font-family,
      icon-font-size,
      icon-line-height,
      icon-text-decoration,
      icon-padding-right,
      icon-padding-left,
      icon-background-color,
      icon-text-color
    ),
    $prefixes...
  );
}

/// @deprecated
@mixin icon-format($prefix) {
  @include icon;

  & {
    font-family: var(--#{$prefix}icon-font-family, var(--icon-font-family));
    font-size: var(--#{$prefix}icon-font-size, var(--icon-font-size));
    line-height: var(--#{$prefix}icon-line-height);
    text-decoration: var(--#{$prefix}icon-text-decoration);
    padding-right: var(--#{$prefix}icon-padding-right, 0.5rem);
    padding-left: var(--#{$prefix}icon-padding-left, 0);
    background-color: var(--#{$prefix}icon-background-color);
    color: var(--#{$prefix}icon-text-color);
  }
}

/// @deprecated
@mixin icon-format-variables($prefix, $parentPrefix, $state) {
  --#{$prefix}icon: none;
  --#{$prefix}icon-font-family: var(--#{$parentPrefix}icon-font-family);
  --#{$prefix}icon-font-size: var(--#{$parentPrefix}icon-font-size);
  --#{$prefix}icon-line-height: var(--#{$parentPrefix}icon-line-height);
  --#{$prefix}icon-text-decoration: var(--#{$parentPrefix}icon-text-decoration);
  --#{$prefix}icon-padding-right: 0.5rem;
  --#{$prefix}icon-padding-left: 0;
  --#{$prefix}icon-background-color: var(
    --#{$parentPrefix}#{$state}background-color
  );
  --#{$prefix}icon-text-color: var(--#{$parentPrefix}#{$state}text-color);
}

/// @deprecated
@mixin icon-content($prefix, $parentPrefix: false) {
  & {
    @if $parentPrefix {
      content: var(--#{$prefix}icon);
    } @else {
      content: var(--#{$prefix}icon, --#{$parentPrefix}icon);
    }
  }
}

@mixin define-icons($glyphs, $position: "before", $font-family: null) {
  /* Specified for link as buttons to allow a.button icons to be overwritten by using the variable. */
  a.button .icon,
  .icon,
  .icon-only {
    @each $name, $glyph in $glyphs {
      &.icon-#{$name}::#{$position} {
        @if $font-family {
          font-family: $font-family;
        }
        content: $glyph;
      }
    }
  }
}
